# Generated by Django 3.1.7 on 2021-06-14 08:21

import colorfield.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='nom')),
            ],
            options={
                'verbose_name': 'illustrateur',
            },
        ),
        migrations.CreateModel(
            name='Designer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='nom')),
            ],
            options={
                'verbose_name': 'auteur',
            },
        ),
        migrations.CreateModel(
            name='Difficulty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='nom')),
            ],
            options={
                'verbose_name': 'difficulté',
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='nom')),
                ('english_name', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='nom anglais')),
                ('player_min', models.IntegerField(blank=True, null=True, verbose_name='nombre de joueur minimum')),
                ('player_max', models.IntegerField(blank=True, null=True, verbose_name='nombre de joueur maximum')),
                ('playing_time', models.CharField(blank=True, max_length=50, null=True, verbose_name='durée de jeu')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='date de création')),
                ('picture', models.TextField(blank=True, null=True, verbose_name="URL interne de l'image")),
                ('external_image', models.TextField(blank=True, null=True, verbose_name="URL externe de l'image")),
                ('thumb_image', models.TextField(blank=True, null=True, verbose_name="URL externe de l'image de petite taille")),
                ('bgg_link', models.TextField(blank=True, verbose_name='URL de BGG ou Tric Trac ')),
                ('age', models.IntegerField(blank=True, null=True, verbose_name='âge')),
                ('buying_price', models.IntegerField(blank=True, null=True, verbose_name="prix d'achat")),
                ('stock', models.IntegerField(default=1, verbose_name='Quantité')),
                ('max_time', models.IntegerField(blank=True, null=True, verbose_name='temps de jeu maximum')),
                ('by_player', models.BooleanField(default=False, verbose_name='temps de jeu défini par joueur ?')),
                ('artists', models.ManyToManyField(blank=True, to='ludorecherche.Artist', verbose_name='illustrateur')),
                ('designers', models.ManyToManyField(blank=True, to='ludorecherche.Designer', verbose_name='Auteur')),
                ('difficulty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ludorecherche.difficulty', verbose_name='difficulté')),
            ],
            options={
                'verbose_name': 'jeu',
                'verbose_name_plural': 'jeux',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='nom')),
            ],
            options={
                'verbose_name': 'langue',
            },
        ),
        migrations.CreateModel(
            name='Mechanism',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='nom')),
            ],
            options={
                'verbose_name': 'mécanique associé',
                'verbose_name_plural': 'mécaniques associés',
            },
        ),
        migrations.CreateModel(
            name='PlayingMode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='nom')),
            ],
            options={
                'verbose_name': 'mode de jeu',
                'verbose_name_plural': 'modes de jeux',
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='nom')),
            ],
            options={
                'verbose_name': 'éditeur',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='nom')),
            ],
            options={
                'verbose_name': 'étiquette',
            },
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='nom')),
                ('font_name', models.CharField(blank=True, max_length=200, verbose_name='nom de la police')),
                ('font_link', models.TextField(blank=True, verbose_name='lien de la police')),
                ('background_image', models.CharField(blank=True, max_length=200, verbose_name='image de fond')),
                ('image_404', models.CharField(blank=True, max_length=200, verbose_name='image de page non trouvé')),
                ('title_404', models.CharField(blank=True, max_length=200, verbose_name='titre page non trouvé ')),
                ('text_404', models.TextField(blank=True, verbose_name='texte page non trouvé ')),
                ('image_500', models.CharField(blank=True, max_length=200, verbose_name='image de page erreur serveur')),
                ('title_500', models.CharField(blank=True, max_length=200, verbose_name='titre page erreur serveur ')),
                ('text_500', models.TextField(blank=True, verbose_name='texte page erreur serveur ')),
                ('list_all_title', models.CharField(blank=True, max_length=200, verbose_name='titre liste globale ')),
                ('index_title', models.CharField(blank=True, max_length=200, verbose_name='titre accueil')),
                ('index_text', models.TextField(blank=True, verbose_name='texte Accueil ')),
                ('advanced_search_title', models.CharField(blank=True, max_length=200, verbose_name='titre page de recherche avancée')),
                ('advanced_search_button_text', models.CharField(blank=True, max_length=200, verbose_name='texte du bouton recherche avancée')),
                ('query_name', models.CharField(blank=True, max_length=200, verbose_name='nom de la requête')),
                ('empty_query_text', models.TextField(blank=True, verbose_name='texte requête vide ')),
                ('empty_query_image', models.CharField(blank=True, max_length=200, verbose_name='image requête vide')),
                ('color_main', colorfield.fields.ColorField(default='#FF0000', max_length=18)),
                ('color_2nd', colorfield.fields.ColorField(default='#FF0000', max_length=18)),
                ('color_3rd', colorfield.fields.ColorField(default='#FF0000', max_length=18)),
                ('color_4th', colorfield.fields.ColorField(default='#FF0000', max_length=18)),
                ('color_back', colorfield.fields.ColorField(default='#FF0000', max_length=18)),
            ],
            options={
                'verbose_name': 'Thème',
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='nom')),
            ],
            options={
                'verbose_name': 'Thème associé',
                'verbose_name_plural': 'Thèmes associés',
            },
        ),
        migrations.CreateModel(
            name='MultiAddOn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='nom')),
                ('english_name', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='nom anglais')),
                ('player_min', models.IntegerField(blank=True, null=True, verbose_name='nombre de joueur minimum')),
                ('player_max', models.IntegerField(blank=True, null=True, verbose_name='nombre de joueur maximum')),
                ('playing_time', models.CharField(blank=True, max_length=50, null=True, verbose_name='durée de jeu')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='date de création')),
                ('picture', models.TextField(blank=True, null=True, verbose_name="URL interne de l'image")),
                ('external_image', models.TextField(blank=True, null=True, verbose_name="URL externe de l'image")),
                ('thumb_image', models.TextField(blank=True, null=True, verbose_name="URL externe de l'image de petite taille")),
                ('bgg_link', models.TextField(blank=True, verbose_name='URL de BGG ou Tric Trac ')),
                ('age', models.IntegerField(blank=True, null=True, verbose_name='âge')),
                ('buying_price', models.IntegerField(blank=True, null=True, verbose_name="prix d'achat")),
                ('stock', models.IntegerField(default=1, verbose_name='Quantité')),
                ('max_time', models.IntegerField(blank=True, null=True, verbose_name='temps de jeu maximum')),
                ('artists', models.ManyToManyField(blank=True, to='ludorecherche.Artist', verbose_name='illustrateur')),
                ('designers', models.ManyToManyField(blank=True, to='ludorecherche.Designer', verbose_name='Auteur')),
                ('difficulty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ludorecherche.difficulty', verbose_name='difficulté')),
                ('games', models.ManyToManyField(blank=True, related_name='multi_add_ons', to='ludorecherche.Game', verbose_name='jeux associés')),
                ('language', models.ManyToManyField(blank=True, to='ludorecherche.Language', verbose_name='langue')),
                ('playing_mode', models.ManyToManyField(blank=True, to='ludorecherche.PlayingMode', verbose_name='type')),
                ('publishers', models.ManyToManyField(blank=True, to='ludorecherche.Publisher', verbose_name='éditeur')),
            ],
            options={
                'verbose_name': 'extension partagée',
                'verbose_name_plural': 'extensions  partagées',
            },
        ),
        migrations.AddField(
            model_name='game',
            name='language',
            field=models.ManyToManyField(blank=True, to='ludorecherche.Language', verbose_name='langue'),
        ),
        migrations.AddField(
            model_name='game',
            name='mechanism',
            field=models.ManyToManyField(blank=True, related_name='games', to='ludorecherche.Mechanism', verbose_name='mécaniques associées'),
        ),
        migrations.AddField(
            model_name='game',
            name='playing_mode',
            field=models.ManyToManyField(blank=True, to='ludorecherche.PlayingMode', verbose_name='type'),
        ),
        migrations.AddField(
            model_name='game',
            name='publishers',
            field=models.ManyToManyField(blank=True, to='ludorecherche.Publisher', verbose_name='éditeur'),
        ),
        migrations.AddField(
            model_name='game',
            name='tag',
            field=models.ManyToManyField(blank=True, related_name='games', to='ludorecherche.Tag', verbose_name='étiquettes'),
        ),
        migrations.AddField(
            model_name='game',
            name='topic',
            field=models.ManyToManyField(blank=True, related_name='games', to='ludorecherche.Topic', verbose_name='thèmes associés'),
        ),
        migrations.CreateModel(
            name='Background',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='nom')),
                ('theme', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ludorecherche.theme', verbose_name="personnaliser l'interface")),
            ],
            options={
                'verbose_name': 'Interface',
            },
        ),
        migrations.CreateModel(
            name='AddOn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='nom')),
                ('english_name', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='nom anglais')),
                ('player_min', models.IntegerField(blank=True, null=True, verbose_name='nombre de joueur minimum')),
                ('player_max', models.IntegerField(blank=True, null=True, verbose_name='nombre de joueur maximum')),
                ('playing_time', models.CharField(blank=True, max_length=50, null=True, verbose_name='durée de jeu')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='date de création')),
                ('picture', models.TextField(blank=True, null=True, verbose_name="URL interne de l'image")),
                ('external_image', models.TextField(blank=True, null=True, verbose_name="URL externe de l'image")),
                ('thumb_image', models.TextField(blank=True, null=True, verbose_name="URL externe de l'image de petite taille")),
                ('bgg_link', models.TextField(blank=True, verbose_name='URL de BGG ou Tric Trac ')),
                ('age', models.IntegerField(blank=True, null=True, verbose_name='âge')),
                ('buying_price', models.IntegerField(blank=True, null=True, verbose_name="prix d'achat")),
                ('stock', models.IntegerField(default=1, verbose_name='Quantité')),
                ('max_time', models.IntegerField(blank=True, null=True, verbose_name='temps de jeu maximum')),
                ('artists', models.ManyToManyField(blank=True, to='ludorecherche.Artist', verbose_name='illustrateur')),
                ('designers', models.ManyToManyField(blank=True, to='ludorecherche.Designer', verbose_name='Auteur')),
                ('difficulty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ludorecherche.difficulty', verbose_name='difficulté')),
                ('game', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='add_ons', to='ludorecherche.game', verbose_name='jeu associé')),
                ('language', models.ManyToManyField(blank=True, to='ludorecherche.Language', verbose_name='langue')),
                ('playing_mode', models.ManyToManyField(blank=True, to='ludorecherche.PlayingMode', verbose_name='type')),
                ('publishers', models.ManyToManyField(blank=True, to='ludorecherche.Publisher', verbose_name='éditeur')),
            ],
            options={
                'verbose_name': 'extension',
            },
        ),
    ]
